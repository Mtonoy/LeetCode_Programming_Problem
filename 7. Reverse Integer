Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
Example 4:

Input: x = 0
Output: 0
 

Constraints:

-231 <= x <= 231 - 1


===================  C#   =================================================

public class Solution {
public int Reverse(int input) {
var number = input.ToString();
var isNegative = input < 0;
if (isNegative)
{
number = number.Substring(1).ToString();

        }

        var length = number.ToString().Length;
        string[] reverseNumber = new string[length];
      
        for (int i = 0; i < length; i++)
        {
            reverseNumber[i] = number[length - (i + 1)].ToString();
        }
        string output = string.Join("", reverseNumber);

        if (int.TryParse(output, out int outputReverse))
        {
            return isNegative ? -outputReverse : outputReverse;
        }
        else
        {
            return 0;
        }
         
}
}



